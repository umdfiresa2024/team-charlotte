---
title: "GeoCoding"
format: gfm
editor: visual
---

## GeoCoding

This script leverages the Google Maps Geocoding API to retrieve the latitude and longitude coordinates for each station on the Charlotte Light Rail Blue Line. The retrieved coordinates are then used to create a plot, effectively visualizing the spatial distribution of the stations.

## Running Code

### Installing Packages

```{r}
#| echo: false
install.packages("tidyverse")
install.packages("ggmap")
install.packages("maptiles")
install.packages("terra")
```

### Loading Libraries

```{r}
#| echo: false
library("tidyverse")
library("ggmap")
library("terra")
library("maptiles")
```

### Fetching the Coordinates

Using Google API

```{r}
# DONT RUN THIS CODE
c<-read.csv("FinalLightBlueDataset.csv")
c


register_google(key = "AIzaSyBFzZRvnnrYw2l5CQRrbBnPZt2-EIAsiD8", write = TRUE)

#dir()

addr.geo <- mutate_geocode(c, location = stations, output = "latlona")

```

### Transferring Data into CSV File

```{r}
# DONT RUN THIS CODE
write.csv(addr.geo, "geocoded_data.csv", row.names = FALSE)
```

### Cleaning Data

```{r}
addrs.geo <- read.csv("geocoded_data.csv")
new_addr <- addrs.geo %>% 
  mutate(
    lat2 = ifelse(
      stations == "Bland Street station", 
      35.21622, 
      lat
    ), 
    lon2 = ifelse(
      stations == "Bland Street station", 
      -80.85446, 
      lon
    ),
    address2 = ifelse(
      stations == "Bland Street station", 
      "1511 Camden Road, charlotte, nc, usa", address
      
    )
  ) %>% 
  mutate(
    lat2 = ifelse(
      stations == "Carson light rail station (Charlotte)", 
      35.21944, 
      lat2
    ), 
    lon2 = ifelse(
      stations == "Carson light rail station (Charlotte)", 
      -80.84823, 
      lon2
    ),
    address2 = ifelse(
      stations == "Carson light rail station (Charlotte)", 
      "218 East Carson Boulevard, charlotte, nc, usa",
      address2
    )
  ) %>% 
  mutate(
    lat2 = ifelse(
      stations == "Charlotte Transportation Center", 
      35.21944, 
      lat2
    ), 
    lon2 = ifelse(
      stations == "Charlotte Transportation Center", 
      -80.84823, 
      lon2
    ),
    address2 = ifelse(
      stations == "Charlotte Transportation Center", 
      "310 East Trade Street, charlotte, nc, usa", address2 
    )
  ) %>% 
  
  
  mutate(
    lat2 = ifelse(
      stations == "JW Clay Blvd/UNC Charlotte station", 
      35.31155, 
      lat2
    ), 
    lon2 = ifelse(
      stations == "JW Clay Blvd/UNC Charlotte station", 
      -80.74547, 
      lon2
    ),
    address2 = ifelse(
      stations == "JW Clay Blvd/UNC Charlotte station", 
      "9048 North Tryon Street, charlotte, nc, usa", address2 
    )
  )


```

### Storing Lat-lon

```{r}
sample_latlon <- cbind(addrs.geo$lon, addrs.geo$lat)
sample_latlon
```

### Using Vector Data

```{r}
pts <-  vect(sample_latlon)
class(pts)
pts
geom(pts)
crdref <- "+proj=longlat +datum=WGS84"
pts <- vect(sample_latlon, crs=crdref)
plot(pts)
crs(pts)
```

### Coordinate Reference System(CRS)

```{r}
#crdref <- "+proj=longlat +datum=WGS84"
#pts1 <- vect(sample_latlon, crs=crdref)
#plot(pts1)
#crs(pts1)
```

### Plotting the Coordinates

```{r}
point_map <- vect(sample_latlon, type="points", crs = crdref)
point_map
plot(point_map)
pols <- vect(sample_latlon, type="polygons", crs = crdref)
pols
plot(pols)
plot(pols, border="blue", col="yellow", lwd=2)
# pch = plot charater = 20 - circle 
# cex = charater expansion
points(x = pts, col="red", pch = 20, cex = 1)

```

```{r}
x <- vect(sample_latlon, crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
plot(x)
# You can change the width (min = 1000m, max = 3000m)
pts_buffer <- buffer(x, width = 3000)
plot(pts_buffer)

char_lr <- vect("/Users/paditya9/team-charlotte/lr_1km_buff/lr_1km_buff.shp")
char_lr_line <- aggregate(char_lr, dissolve = TRUE )
plot(char_lr_line)

# Converting the Light Rails map with the required CRS
lr_project <- project(char_lr_line, "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")

# The centroids function computes the geometric center (centroid) of each geometry. 
# The argument inside = FALSE indicates that the centroids should be calculated regardless of whether they fall within the geometries or not

lrc <- centroids(lr_project, inside = FALSE)

# Creating Buffer for the centroid of the entire map with respect to the polygon
pts_buffer1 <- buffer(lrc, width = 10000)

# Creating Buffer for Map
extent<-buffer(x, width = 10000)

bg <- get_tiles(ext(extent))

plot(bg)
points(x)
lines(lr_project, col="blue")
lines(pts_buffer1, col = "green")
lines(pts_buffer, col = "red")
```
