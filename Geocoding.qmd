---
title: "GeoCoding"
format: gfm
editor: visual
---

## GeoCoding

This script leverages the Google Maps Geocoding API to retrieve the latitude and longitude coordinates for each station on the Charlotte Light Rail Blue Line. The retrieved coordinates are then used to create a plot, effectively visualizing the spatial distribution of the stations.

## Running Code

### Installing Packages

```{r}
#| echo: false
install.packages("tidyverse")
install.packages("ggmap")
install.packages("maptiles")
install.packages("terra")
install.packages("leaflet")
install.packages("lubridate")
install.packages("RColorBrewer")
```

### Loading Libraries

```{r}
#| echo: false
library("tidyverse")
library("ggmap")
library("terra")
library("maptiles")
library("leaflet")
library("lubridate")
library("dplyr")
library("RColorBrewer")
```

### Fetching the Coordinates

Using Google API

```{r}
# DONT RUN THIS CODE
c<-read.csv("FinalLightBlueDataset.csv")
c


register_google(key = "AIzaSyBFzZRvnnrYw2l5CQRrbBnPZt2-EIAsiD8", write = TRUE)

#dir()

addr.geo <- mutate_geocode(c, location = stations, output = "latlona")

```

### Transferring Data into CSV File

```{r}
# DONT RUN THIS CODE
write.csv(addr.geo, "geocoded_data.csv", row.names = FALSE)
```

### Cleaning Data

```{r}
addrs.geo <- read.csv("geocoded_data.csv")
new_addr <- addrs.geo %>% 
  mutate(
    lat2 = ifelse(
      stations == "Bland Street station", 
      35.21622, 
      lat
    ), 
    lon2 = ifelse(
      stations == "Bland Street station", 
      -80.85446, 
      lon
    ),
    address2 = ifelse(
      stations == "Bland Street station", 
      "1511 Camden Road, charlotte, nc, usa", address
      
    )
  ) %>% 
  mutate(
    lat2 = ifelse(
      stations == "Carson light rail station (Charlotte)", 
      35.21944, 
      lat2
    ), 
    lon2 = ifelse(
      stations == "Carson light rail station (Charlotte)", 
      -80.84823, 
      lon2
    ),
    address2 = ifelse(
      stations == "Carson light rail station (Charlotte)", 
      "218 East Carson Boulevard, charlotte, nc, usa",
      address2
    )
  ) %>% 
  mutate(
    lat2 = ifelse(
      stations == "Charlotte Transportation Center", 
      35.21944, 
      lat2
    ), 
    lon2 = ifelse(
      stations == "Charlotte Transportation Center", 
      -80.84823, 
      lon2
    ),
    address2 = ifelse(
      stations == "Charlotte Transportation Center", 
      "310 East Trade Street, charlotte, nc, usa", address2 
    )
  ) %>% 
  
  
  mutate(
    lat2 = ifelse(
      stations == "JW Clay Blvd/UNC Charlotte station", 
      35.31155, 
      lat2
    ), 
    lon2 = ifelse(
      stations == "JW Clay Blvd/UNC Charlotte station", 
      -80.74547, 
      lon2
    ),
    address2 = ifelse(
      stations == "JW Clay Blvd/UNC Charlotte station", 
      "9048 North Tryon Street, charlotte, nc, usa", address2 
    )
  )


```

```{r}
write.csv(new_addr, "new_station_coords_data.csv", row.names = FALSE)
```

### Storing Lat-lon

```{r}
sample_latlon <- cbind(new_addr$lon2, new_addr$lat2)
sample_latlon
```

### Using Vector Data

```{r}
pts <-  vect(sample_latlon)
class(pts)
pts
geom(pts)
crdref <- "+proj=longlat +datum=WGS84"
pts <- vect(sample_latlon, crs=crdref)
plot(pts)
crs(pts)
```

### Coordinate Reference System(CRS)

```{r}
#crdref <- "+proj=longlat +datum=WGS84"
#pts1 <- vect(sample_latlon, crs=crdref)
#plot(pts1)
#crs(pts1)
```

### Plotting the Coordinates

```{r}
point_map <- vect(sample_latlon, type="points", crs = crdref)
point_map
plot(point_map)
pols <- vect(sample_latlon, type="polygons", crs = crdref)
pols
plot(pols)
plot(pols, border="blue", col="yellow", lwd=2)
# pch = plot charater = 20 - circle 
# cex = charater expansion
points(x = pts, col="red", pch = 20, cex = 1)

```

### Overlaying the Map

```{r}
x <- vect(sample_latlon, crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
plot(x)
pm_sources <- vect("/Users/paditya9/teamCharlotte/PM2.5 ShapeFiles/new_pm_coords_sources.shp")
plot(pm_sources)

# Creating Buffer around stations

# Ued Buffer Radius is 800 meters
pts_buffer <- buffer(x, width = 800)
plot(pts_buffer)

# Creating Buffer for Map
extent<-buffer(x, width = 200)

bg <- get_tiles(ext(extent), zoom = 11)

plot(bg)

# pch=19 gives filled circles
points(x, col="blue", pch=19, cex=0.5)

# pch=17 gives filled triangles
points(pm_sources, col="purple", pch=17, cex=1)

# Plot the buffer around the stations
lines(pts_buffer, col="red")
```

### Saving Buffer Radius as Shape File

```{r}
writeVector(pts_buffer, "new_buffer_light_rail.shp")
```

### Interactive Map

```{r}
bg <- get_tiles(ext(extent))
points <- x
#lines_lr <- lr_project
#lines_buffer1 <- pts_buffer1
lines_buffer2 <- pts_buffer

interactive_map <- leaflet() %>%
  addTiles() %>%
  addMarkers(data = points) %>%
  #addPolylines(data = lines_lr, color = "blue") %>%
  #addPolylines(data = lines_buffer1, color = "green") %>%
  addPolylines(data = lines_buffer2, color = "red") %>%
  addCircleMarkers(data = pm_sources)
interactive_map
```

```{r}
dir()
```

### Combining PM_25 Daily Data

```{r}
# List all CSV files in the directory
file_list <- list.files(path = "PM25_daily", pattern = "*.csv", full.names = TRUE)

# Read and combine all CSV files into one data frame
combined_df <- do.call(rbind, lapply(file_list, function(file) {
  df <- read.csv(file)
  # Assuming your date column is named 'date' and is in format '%Y%m%d'
  df$date <- as.Date(df$date, format = "%Y%m%d")
  df
}))

# Filter rows from 2003-11-24 to 2011-11-24
combined_df_filtered <- combined_df %>%
  filter(date >= as.Date("2003-11-24") & date <= as.Date("2011-11-24"))

# Write the filtered data frame to a new CSV file
write.csv(combined_df_filtered, "refined_PM25_daily_combined_data.csv", row.names = FALSE)

PM_25_with_date <- read.csv("refined_PM25_daily_combined_data.csv")

PM_25_with_date <- PM_25_with_date %>%
   mutate(formatted_date = paste(substr(date, 1, 4), substr(date, 6, 7), substr(date, 9, 10), sep = "-")) %>% mutate(station_ID = PM_25_with_date$city_num )

write.csv(PM_25_with_date, "refined_date_PM25_daily_data.csv")

```

### Creating Station ID

```{r}
stations_coords <- read.csv("/Users/paditya9/teamCharlotte/new_station_coords_data.csv")

stations_coords <- stations_coords %>% mutate(station_ID = row_number())

write.csv(stations_coords, "station_coords_with_stationID_data.csv", row.names = F)
```

### Cleaning Holiday Data file

```{r}
holidays_data <- read.csv("/Users/paditya9/teamCharlotte/major_holidays_2000_2025.csv", header = TRUE, stringsAsFactors = FALSE)

holidays_data <- holidays_data %>% filter(date >= as.Date("2003-11-24") & date <= as.Date("2011-11-24")) %>% mutate(formatted_date = date)

write.csv(holidays_data, "refined_holidays_data.csv", row.names = F)
```

### Cumulative Date

```{r}
#Reading Stations Data
stationID_data <- read.csv("station_coords_with_stationID_data.csv", header = TRUE, stringsAsFactors = FALSE)[, c("stations", "station_ID", "address2")]

#Reading PM2.5 Daily Data
pm_25_data <- read.csv("refined_date_PM25_daily_data.csv", header = TRUE, stringsAsFactors = FALSE)[, c("station_ID", "formatted_date", "pm25")]

#Reading Meterological Data
met_data <- read.csv("met_data_charlotte/combinedMeteorologyDataCharlotte.csv", header = TRUE, stringsAsFactors = FALSE)[, c("Swnet_tavg","Lwnet_tavg","Qle_tavg","Qh_tavg","Snowf_tavg","Rainf_tavg", "Qsm_tavg", "SnowT_tavg","SWE_tavg","SnowDepth_tavg","Tair_f_tavg","Rainf_f_tavg", "Wind_f_tavg", "Qair_f_tavg", "Psurf_f_tavg", "formatted_date")]

#Reading Holiday Data
holidays_data <- read.csv("refined_holidays_data.csv", header = TRUE, stringsAsFactors = FALSE)[, c("holiday", "formatted_date")]

#Reading Parking Data
parking <- read.csv("BlueLine Parking Dataset - Charlotte.csv", header = TRUE, stringsAsFactors = FALSE)[, c("station_ID", "Parking")]

station_pm_dataCombined <- merge(stationID_data,pm_25_data, by="station_ID", all = F )

station_pm_met_dataCombined <- merge(station_pm_dataCombined, met_data, by="formatted_date", all = F)

station_pm_met_data_parkingCombined <- merge(station_pm_met_dataCombined, parking, by = "station_ID", all = F)

station_pm_met_holiday_dataCombined <- station_pm_met_data_parkingCombined %>% left_join(holidays_data, by = "formatted_date", keep = FALSE, unmatched = "drop")

station_pm_met_holiday_dataCombined <- station_pm_met_data_parkingCombined %>%
  mutate(holiday_binary = ifelse(formatted_date %in% holidays_data$formatted_date, 1, 0))

# Ordering the list by date followed by station ID
station_pm_met_holiday_dataCombined_order <- station_pm_met_holiday_dataCombined[order(station_pm_met_holiday_dataCombined$formatted_date, station_pm_met_holiday_dataCombined$station_ID), ]

# %B is used for abbrevation for Month 
station_pm_met_holiday_dataCombined_formatted <- station_pm_met_holiday_dataCombined_order %>%
  mutate(month = format(as.Date(station_pm_met_holiday_dataCombined_order$formatted_date, format = "%Y-%m-%d"), "%B")) %>% 
# NA = 0; Holiday = 1
  mutate (day_of_week = weekdays(as.Date(station_pm_met_holiday_dataCombined_order$formatted_date, format = "%Y-%m-%d")))
```

### Storing Combined Data Frame

```{r}
write_csv(station_pm_met_holiday_dataCombined_formatted, "station_pm_met_holiday_dataCombined_formatted.csv")

```

### Adding Binary Column for PM Factor's

```{r}
combinedData <- read.csv("station_pm_met_holiday_dataCombined_formatted.csv")

# No PM sources = 0; PM Source near Station = 1
binaryPMFactor <- combinedData %>% 
  mutate(control_variables = ifelse(
    station_ID %in% c(5, 6, 9, 10), 1, 0
  ))

write.csv(binaryPMFactor, "station_pm_met_holiday_dataCombined_formatted.csv" )

```

### Finding Regression Model

```{r}
df <-read.csv("station_pm_met_holiday_dataCombined_formatted.csv")

df2 <- df %>% mutate(date = as.Date(formatted_date,format = "%Y-%m-%d"))


startdate <- as.Date("2003-11-24",format = "%Y-%m-%d")

enddate <- as.Date("2011-11-24",format = "%Y-%m-%d")

opendate <- as.Date("2007-11-24",format = "%Y-%m-%d")

constructionstart <- as.Date("2005-02-26",format = "%Y-%m-%d")

CAIR <- as.Date("2005-03-10",format = "%Y-%m-%d")

metroOpen_df <- df2 %>% filter(date >= startdate & date<=enddate)%>%
  mutate(MetroOpen = ifelse(date>=opendate,1,0))%>%
  mutate(construction = ifelse(date>=constructionstart & date<opendate,1,0))%>%
  mutate(duringCAIR = ifelse(date>=CAIR & date<= enddate,1,0))%>%
  group_by(station_ID)%>%
  arrange(date, station_ID)%>%
  mutate(lTair_f_tavg = lag(Tair_f_tavg))%>%
  mutate(lQair_f_tavg = lag(Qair_f_tavg)) %>%
  mutate(lPsurf_f_tavg = lag(Psurf_f_tavg)) %>%
  mutate(lWind_f_tavg = lag(Wind_f_tavg)) %>%
  mutate(t=as.numeric(date-startdate))%>%
  mutate(t2 = t^2,t3=t^3,t4=t^4)

regression_stats <- summary(m1 <- lm(log(pm25)~MetroOpen+construction+duringCAIR+as.factor(day_of_week)+as.factor(month) + Tair_f_tavg + Swnet_tavg + Lwnet_tavg + Qle_tavg + Qh_tavg + Snowf_tavg + Rainf_tavg + Qsm_tavg + SnowT_tavg + SWE_tavg + SnowDepth_tavg + Tair_f_tavg + Rainf_f_tavg + Wind_f_tavg + Qair_f_tavg + Psurf_f_tavg + Parking + Parking:MetroOpen, data = metroOpen_df))

df2 <- df %>% 
  mutate(date = as.Date(formatted_date, format = "%Y-%m-%d"))

# Define dates
startdate <- as.Date("2003-11-24", format = "%Y-%m-%d")
enddate <- as.Date("2011-11-24", format = "%Y-%m-%d")
opendate <- as.Date("2007-11-24", format = "%Y-%m-%d")
constructionstart <- as.Date("2005-02-26", format = "%Y-%m-%d")
CAIR <- as.Date("2005-03-10", format = "%Y-%m-%d")

# Filter and mutate the data
metroOpen_df <- df2 %>% 
  filter(date >= startdate & date <= enddate) %>%
  mutate(
    MetroOpen = ifelse(date >= opendate, 1, 0),
    construction = ifelse(date >= constructionstart & date < opendate, 1, 0),
    duringCAIR = ifelse(date >= CAIR & date <= enddate, 1, 0)
  ) %>%
  group_by(station_ID) %>%
  arrange(date, station_ID) %>%
  mutate(
    lTair_f_tavg = lag(Tair_f_tavg),
    lQair_f_tavg = lag(Qair_f_tavg),
    lPsurf_f_tavg = lag(Psurf_f_tavg),
    lWind_f_tavg = lag(Wind_f_tavg),
    t = as.numeric(date - startdate),
    t2 = t^2,
    t3 = t^3,
    t4 = t^4
  )

# Perform regression
regression_stats <- summary(
  m1 <- lm(
    log(pm25) ~ MetroOpen + construction + duringCAIR + as.factor(day_of_week) + as.factor(month) +
    Tair_f_tavg + Swnet_tavg + Lwnet_tavg + Qle_tavg + Qh_tavg + Snowf_tavg + Rainf_tavg + 
    Qsm_tavg + SnowT_tavg + SWE_tavg + SnowDepth_tavg + Tair_f_tavg + Rainf_f_tavg + 
    Wind_f_tavg + Qair_f_tavg + Psurf_f_tavg + Parking + Parking:MetroOpen,
    data = metroOpen_df
  )
)

pal <- brewer.pal(n=4,name = "RdBu")
df3 <- df2 %>% 
  group_by(date) %>% summarize(mean_pm25 = mean(pm25)) %>%
mutate(before_after = ifelse(date < opendate, "Before", "After"))

ggplot(df3, aes(x = date, y = mean_pm25, color = before_after))+
  
  geom_rect(aes(xmin = constructionstart,xmax = opendate, ymin = -Inf, ymax = Inf), alpha = 1, fill = "gray") +scale_color_manual(values = pal[3:4])+
  
  
  geom_point() +
  geom_smooth( color = "blue")+
  # facet_wrap(~ station_ID, scales = "free_y") +  # Facet by station_ID
  labs(
    x = "Date",
    y = "Average PM2.5 levels across stations",
    color = "Metro Opening"
  ) +
  
  theme_minimal()+geom_vline(xintercept = opendate, linetype = "dashed")+geom_vline(xintercept = CAIR, linetype = "dashed")


```

```{r}

regression_stats



```

### Interpreting the Regression Model results

-   **Intercept** = 43.02%

-   **MetroOpen** = -22.75%

-   **construction** = -2.09%

-   **duringCAIR** = -4.32%

-   **as.factor(day_of_week)Monday** = -2.43%

-   **as.factor(day_of_week)Saturday** = 0.45%

-   **as.factor(day_of_week)Sunday** = -1.63%

-   **as.factor(day_of_week)Thursday** = 0.73%

-   **as.factor(day_of_week)Tuesday** = 2.20%

-   **as.factor(day_of_week)Wednesday** = 4.10%

-   **as.factor(month)August** = 12.33%

-   **as.factor(month)December** = 18.44%

-   **as.factor(month)February** = 17.41%

-   **as.factor(month)January** = 13.05%

-   **as.factor(month)July** = 14.59%

-   **as.factor(month)June** = 8.25%

-   **as.factor(month)March** = 5.58%

-   **as.factor(month)May** = -0.65%

-   **as.factor(month)November** = 11.97%

-   **as.factor(month)October** = -4.22%

-   **as.factor(month)September** = -1.43%

-   **Tair_f_tavg** = 61.55%

-   **Swnet_tavg** = 0.74%

-   **Lwnet_tavg** = 0.76%

-   **Qle_tavg** = -0.63%

-   **Qh_tavg** = -0.33%

-   **Snowf_tavg** = ∞ (extremely large value, likely unrealistic)

-   **Rainf_tavg** = ∞ (extremely large value, likely unrealistic)

-   **Qsm_tavg** = -100% (suggests a near-total reduction in PM2.5 levels)

-   **SnowT_tavg** = -39.30%

-   **SWE_tavg** = -3.89%

-   **SnowDepth_tavg** = 152.61%

-   **Rainf_f_tavg** = ∞ (extremely large value, likely unrealistic)

-   **Wind_f_tavg** = -15.06%

-   **Qair_f_tavg** = 3026.55%

-   **Psurf_f_tavg** = 7.86%

-   **Parking** = -0.23%

```{r}
regression_stats <- summary(m1 <- lm(log(pm25) ~ MetroOpen:as.factor(station_ID) + construction + as.factor(day_of_week) + as.factor(month) + duringCAIR + Tair_f_tavg + Swnet_tavg + Lwnet_tavg + Qle_tavg + Qh_tavg + Snowf_tavg + Rainf_tavg + Qsm_tavg + SnowT_tavg + SWE_tavg + SnowDepth_tavg + Tair_f_tavg + Rainf_f_tavg + Wind_f_tavg + Qair_f_tavg + Psurf_f_tavg, data = metroOpen_df))

c <- coef(m1)
len_coef <- length(coef(m1))

# Get coefficients of the station-level effect
station_coef <- coef(m1)[(len_coef-(26-1)):len_coef]

# Convert coefficients to percentage change
station_coef_perc <- station_coef * 100

# Get p-values of the station-level effect (p < 0.05 is statistically significant)
pval <- summary(m1)$coefficients[,4][(len_coef-(26-1)):len_coef]

# Combine coefficients and p-values into a dataframe
station_data <- data.frame(coef = station_coef_perc, pval = pval)

# Load station coordinates
x <- vect(sample_latlon, crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
pm_sources <- vect("/Users/paditya9/teamCharlotte/PM2.5 ShapeFiles/new_pm_coords_sources.shp")

# Add coefficients to the spatial data
x$coef <- station_coef_perc
x$pval <- pval

# Define the breaks for the coefficients

breaks_interval <- c(-32, -30, -28, -26, -24, -22, -20)

# Create color palette with different shades of green (adjust green range as desired)
color_palette <- colorRampPalette(c("#2166AC", "#D1E5F0"))
colors <- color_palette(length(breaks_interval) - 1)




# Creating Buffer around stations
# Used Buffer Radius is 800 meters
pts_buffer <- buffer(x, width = 800)

# Creating Buffer for Map
extent <- buffer(aggregate(pts_buffer), width = 3000)

bg <- get_tiles(ext(extent), zoom = 11, provider = "Esri.WorldStreetMap")

png("final_pmchange_station.png", width = 1500, height = 1000, units = "px")

plot(bg)

plot(pts_buffer, 
     "coef",
     type = "interval",
     breaks = breaks_interval, 
     col = colors,
     cex.main = 2.125,
     plg = list( # parameters for drawing legend
       title = "Change in PM2.5 \n (in Percents)",
       title.cex = 1.5, # Legend title size
       cex = 1.5, # Legend text size
       inset = c(0.02, 0.02), # Legend inset (spacing from the plot)
       ncol = 1), # Number of columns in the legend
     add = TRUE)

# pch=19 gives filled circles
points(x, col = "black", pch = 19, cex = 2)

# pch=17 gives filled triangles
points(pm_sources, col = "#B2182B", pch = 17, cex = 2)

# Plot the buffer around the stations
# lines(pts_buffer, col = "red")

dev.off() 
```
